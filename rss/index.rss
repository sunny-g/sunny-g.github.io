<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Mindful Ramblings</title><description>My journey as a software engineer.</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Tue, 01 Dec 2015 01:16:50 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Developing NPM packages for React Native</title><description>&lt;p&gt;I'll keep this short: there are a few ways you could potentially develop NPM packages to be used with React Native that I'm aware of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;develop them in some folder, use symbolic links to include them in the &lt;code&gt;node_modules&lt;/code&gt; folder of your React Native app (won't work because &lt;code&gt;Watchman&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</description><link>http://localhost:2368/2015/11/30/developing-node_modules-for-react-native/</link><guid isPermaLink="false">0e17b393-5477-4cb0-b53e-aa1c4db1c333</guid><dc:creator>Sunny G</dc:creator><pubDate>Tue, 01 Dec 2015 01:16:36 GMT</pubDate><content:encoded>&lt;p&gt;I'll keep this short: there are a few ways you could potentially develop NPM packages to be used with React Native that I'm aware of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;develop them in some folder, use symbolic links to include them in the &lt;code&gt;node_modules&lt;/code&gt; folder of your React Native app (won't work because &lt;code&gt;Watchman&lt;/code&gt; doesn't use scan relative links)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;develop them in some folder, then use &lt;code&gt;npm link&lt;/code&gt; to include the packages in your app (won't work because &lt;code&gt;npm link&lt;/code&gt; uses symbolic links underneath the hood, and will fail for the aforementioned reason)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;develop them in some folder, set up relative install directories in your &lt;code&gt;package.json&lt;/code&gt; and for every change to your package you want to test, run in your React Native app directory &lt;code&gt;rm -rm node_modules &amp;amp;&amp;amp; npm i &amp;amp;&amp;amp; npm start&lt;/code&gt;; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;after running &lt;code&gt;react-native init&lt;/code&gt;, go to the file &lt;code&gt;node_modules/react-native/packager/react-packager/src/FileWatcher/index.js&lt;/code&gt; and edit line 70 like this:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class="language-js"&gt;isWatchman() {  
  return detectingWatcherClass.then(
    Watcher =&amp;gt; false    // line 70
    // used to be:
    // Watcher =&amp;gt; Watcher === sane.WatchmanWatcher
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not exactly sure how/why it works (I have since lost the blog post/Github issue that I got this from), but this last option tells &lt;code&gt;Watchman&lt;/code&gt; to scan our &lt;code&gt;node_modules&lt;/code&gt; folder for any changes and live-reload when any of them changes. &lt;/p&gt;

&lt;p&gt;So to write your NPM packages, develop them in a folder in your React Native app's &lt;code&gt;node_modules&lt;/code&gt; folder and add the relative NPM package path to your &lt;code&gt;package.json&lt;/code&gt; file under &lt;code&gt;"dependencies"&lt;/code&gt;: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"any-db-client": "file:./node_modules/any-db-client",
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's it! When you're done developing the NPM package, publish it to NPM, move your package's folder to another location, change your &lt;code&gt;package.json&lt;/code&gt; to reflect installation from NPM, and enjoy! If you know of a better, more maintainable way of accomplishing the same goal, please let me know in the comments below!&lt;/p&gt;</content:encoded></item><item><title>Setting up a Ghost Blog with Github Pages</title><description>&lt;!--  
** check url changing in config.js **

** other links **
- http://joshgerdes.com/host-a-static-ghost-blog-on-github/

steps:  
add disqus  
* set up disqus (with photos)
* add disqus to post.hbs in your theme folder
--&gt;

&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; is a static site host on &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; for hosting simple blogs for developers or landing pages for their open-source projects. &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; is "just a blogging platform" that's open source and is known for being extremely easy to use while also being beautiful out-of-the-box. It's very similar to &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;&lt;/p&gt;</description><link>http://localhost:2368/2015/09/24/ghost-with-github/</link><guid isPermaLink="false">02120703-6ba6-4149-8b7c-09f0636efd86</guid><category>ghost</category><category>github</category><category>disqus</category><category>blog</category><dc:creator>Sunny G</dc:creator><pubDate>Thu, 24 Sep 2015 23:32:34 GMT</pubDate><content:encoded>&lt;!--  
** check url changing in config.js **

** other links **
- http://joshgerdes.com/host-a-static-ghost-blog-on-github/

steps:  
add disqus  
* set up disqus (with photos)
* add disqus to post.hbs in your theme folder
--&gt;

&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; is a static site host on &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; for hosting simple blogs for developers or landing pages for their open-source projects. &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; is "just a blogging platform" that's open source and is known for being extremely easy to use while also being beautiful out-of-the-box. It's very similar to &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; - a Ruby-based static site generator that Github Pages uses &lt;a href="https://jekyllrb.com/docs/github-pages/"&gt;behind the scenes&lt;/a&gt; - except that Ghost is written in JavaScript and was started as a &lt;a href="https://www.kickstarter.com/projects/johnonolan/ghost-just-a-blogging-platform/description"&gt;Kickstarter project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This blog post (built with Ghost and hosted on &lt;a href="http://blog.sunnyg.io"&gt;my Github Pages blog&lt;/a&gt;) will guide you through the process of publishing your own personal blog hosted by Github for free! The general idea behind this process is to let &lt;a href="https://github.com/axitkhurana/buster"&gt;Buster&lt;/a&gt; generate a static HTML and CSS version of your locally-running Ghost blog server, publish the files to a Github repo, and then 1-20 minutes later you enjoy your blog, which pulls the pages from that repo and serves them on the default URL of &lt;a href="http://sunny-g.github.io"&gt;[your-github-username].github.io&lt;/a&gt;! &lt;/p&gt;

&lt;h4 id="installdependenciesbusterandghost"&gt;Install Dependencies, &lt;code&gt;buster&lt;/code&gt; and Ghost&lt;/h4&gt;

&lt;p&gt;First, you must create a folder to hold your Ghost files and static files. I chose to do this in my &lt;a href="https://www.dropbox.com/"&gt;Dropbox&lt;/a&gt; folder, as I'll explain later.  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir ~/Dropbox/blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you'll need to make sure you have both &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; and &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; installed to run the Ghost server and Buster. Apple Macs should have Python installed by default and I prefer using &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt; to install Node.js and &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;. If you need to install Node.js and npm, &lt;strong&gt;I highly recommend&lt;/strong&gt; following this &lt;a href="http://www.codydaig.me/installing-node-with-nvm/"&gt;simple guide&lt;/a&gt; which uses &lt;a href="http://brew.sh/"&gt;homebrew&lt;/a&gt; (an OS X package manager) to install nvm, which will  then let you manage multiple versions of Node.js and npm very easily.&lt;/p&gt;

&lt;p&gt;We'll also need a tool called &lt;a href="http://www.gnu.org/software/wget/"&gt;wget&lt;/a&gt; that's used to retrieve content from web servers, and we'll also install it using homebrew:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;$ brew update
$ brew install wget
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we'll have to install Buster and Ghost; if you have &lt;code&gt;pip&lt;/code&gt; (a Python package manager), installing Buster is as simple as:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;# go to your blog's directory
$ cd ~/Dropbox/blog

# if you don't have already have pip
$ sudo easy_install pip

$ sudo pip install buster
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;while this is the easiest way I know of to install and start your local Ghost server:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-sh"&gt;$ wget https://ghost.org/zip/ghost-0.7.0.zip
$ unzip ghost-0.7.0.zip -d ghost
$ cd ghost
$ npm install --production
$ npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;npm start&lt;/code&gt; starts the Node.js server that will serve up the admin interface for your blog at &lt;code&gt;http://localhost:2368/ghost&lt;/code&gt;. This is where you'll create an admin account for managing your local blog posts, settings and themes and also where you'll create and edit your blog posts using Ghost's fancy side-by-side Markdown editor.&lt;/p&gt;

&lt;h4 id="generatingthestaticfilesforyourblogsrepo"&gt;Generating the static files for your blog's repo&lt;/h4&gt;

&lt;p&gt;The next thing you'll want to do is create a repo for your static blog. On Github, create a new repo whose name is &lt;code&gt;[your-username].github.io&lt;/code&gt;. The repo's name must be &lt;code&gt;[your-username].github.io&lt;/code&gt;, otherwise Github won't know to create a site at that URL from that repo.&lt;/p&gt;

&lt;p&gt;Once it's been created, lets start our Ghost server, create a new tab in our terminal and use &lt;code&gt;buster&lt;/code&gt; to create our blog's repo and its static files:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# (in a new tab) get back to the blog folder
$ cd ~/Dropbox/blog
$ buster setup --gh-repo=\
"https://github.com/&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git"
$ buster generate
$ buster deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create a local repo in the folder named &lt;code&gt;static&lt;/code&gt; who's remote is the URL to the Github repo you just created. &lt;code&gt;buster generate&lt;/code&gt; will create all of the appropriate directories, HTML pages and links for your entire Ghost blog within that folder. The last command, &lt;code&gt;buster deploy&lt;/code&gt;, adds, commits and pushes the changes you generated up to your blog's repo. And that's it! Github Pages can take as much as 20 minutes to update, but it often happens much sooner.&lt;/p&gt;

&lt;p&gt;Every time you need make a change to your blog, whether by changing a theme or adding/editing a post, just run &lt;code&gt;npm start&lt;/code&gt; within the &lt;code&gt;blog/ghost/&lt;/code&gt; folder and call &lt;code&gt;buster generate&lt;/code&gt; from your &lt;code&gt;blog&lt;/code&gt; folder to recreate the appropriate static files. All you have to do now to re-deploy your the latest version of your blog is &lt;code&gt;buster deploy&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;This is why I put &lt;code&gt;blog&lt;/code&gt; in my Dropbox folder - edits can be made within the Ghost side-by-side Markdown editor on my main computer and will always be backed up without having to commit them to my blog's repo, and if I happen to be on my tablet or phone, I can just edit the raw Markdown.&lt;/p&gt;

&lt;p&gt;Once it's been deployed and you're done making changes to your blog, hit &lt;code&gt;Ctrl-C&lt;/code&gt; from within the Ghost server tab to shut down the server.&lt;/p&gt;

&lt;p&gt;And that's it! You can check out my Github Pages-hosted Ghost blog at &lt;a href="http://blog.sunnyg.io"&gt;http://blog.sunnyg.io&lt;/a&gt;. If you have any questions, feel free to reach out to me and thanks for reading!&lt;/p&gt;</content:encoded></item><item><title>Introduction to Flux and Angular Integration</title><description>&lt;p&gt;For my group's thesis project at &lt;a href="http://www.hackreactor.com"&gt;Hack Reactor&lt;/a&gt;, our client is having us design a vendor app for taking and processing drink orders at bars to accompany the app they have already built for end-users. The existing app is our model for the vendor app and employed an interesting design&lt;/p&gt;</description><link>http://localhost:2368/2014/12/30/flux-and-angular/</link><guid isPermaLink="false">e5d947db-fcaa-4826-a728-bf921bcdaf55</guid><category>angularjs</category><category>flux</category><category>facebook flux</category><category>google angular</category><category>flux-angular</category><dc:creator>Sunny G</dc:creator><pubDate>Tue, 30 Dec 2014 19:33:28 GMT</pubDate><content:encoded>&lt;p&gt;For my group's thesis project at &lt;a href="http://www.hackreactor.com"&gt;Hack Reactor&lt;/a&gt;, our client is having us design a vendor app for taking and processing drink orders at bars to accompany the app they have already built for end-users. The existing app is our model for the vendor app and employed an interesting design choice: the combined use of Facebook's &lt;a href="https://facebook.github.io/flux/"&gt;Flux&lt;/a&gt; and Google's &lt;a href="https://angularjs.org/"&gt;AngularJS&lt;/a&gt;. While I'm no expert at either technology, I'm going to elaborate on this integration and how our library of choice, &lt;a href="https://github.com/christianalfoni/flux-angular"&gt;flux-angular&lt;/a&gt;, handles this unique combination. &lt;/p&gt;

&lt;h4 id="whatisflux"&gt;What is Flux?&lt;/h4&gt;

&lt;p&gt;Flux is self-descibed as an "architecture for building client-side web apps," and at its core, its just an architecture pattern for managing data flow throughout your application. Its also commonly referred to as an alternative to the traditional model-view-controller architecture.&lt;/p&gt;

&lt;p&gt;Flux is composed of three main parts: the store (which holds your state), actions (which trigger the dispatcher to do something), and a dispatcher (which triggers callbacks registered to it by the store to modify the store). According to Facebook, this allows developers to more easily reason about the data flow throughout their large applications as each component only has one classification of input components and only outputs to/affects another classification of components.&lt;/p&gt;

&lt;h4 id="howdoesitworkwithangular"&gt;How does it work with Angular?&lt;/h4&gt;

&lt;p&gt;Shying away from strict adherence to the Flux architecture, flux-angular entirely eschews the use dispatchers altogether, instead building solely on actions and stores. &lt;/p&gt;

&lt;p&gt;An example of an &lt;code&gt;$store&lt;/code&gt; factory (taken from the README) would look like this for a simple Todo application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular.module('app', ['flux'])
.factory('$store', function (flux, $actions) {
    return flux.store({
        todos: [],
        actions: [
            $actions.addTodo
        ],
        addTodo: function (title) {
            this.todos.push({title: title, created: Date.now()});
            this.emitChange();
        },
        exports: {
            getTodos: function () {
                return this.todos;
            }
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;code&gt;$store&lt;/code&gt; has an array to Todo items which will be the source of truth for these items in the application. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;addTodo&lt;/code&gt; is an action that can modify the &lt;code&gt;$store&lt;/code&gt; whenever called. It also calls &lt;code&gt;emitChange()&lt;/code&gt;, emitting a change event whenever the &lt;code&gt;$store&lt;/code&gt; is changed; this will become useful when we have controllers in our application that want to bind their &lt;code&gt;$scope&lt;/code&gt; to a part of the &lt;code&gt;$store&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We also export a &lt;code&gt;getTodos&lt;/code&gt; getter function so that when a controller wants to update its &lt;code&gt;$scope&lt;/code&gt; with the latest &lt;code&gt;$store&lt;/code&gt; data, it can bind to that data without worrying about later modifying the &lt;code&gt;$store&lt;/code&gt; itself. &lt;/p&gt;

&lt;p&gt;In order to use the &lt;code&gt;addTodo&lt;/code&gt; function in a controller (e.g. &lt;code&gt;$actions.addTodo('go to the store')&lt;/code&gt;), we must first bind the &lt;code&gt;$store&lt;/code&gt;'s actions to the &lt;code&gt;$actions&lt;/code&gt; factory: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular.module('app', ['flux'])
.factory('$actions', function (flux) {
    return flux.actions([
        'addTodo',
    ]);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, elsewhere in some other controller, we can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.controller('MyCtrl', function ($scope, $store, $actions) {

    $store.bindTo($scope, function () {
        $scope.todos = $store.getTodos();
    });

    $scope.title = '';
    $scope.addTodo = function () {
        $actions.addTodo($scope.title);
    };
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first block lets us update our controller's local &lt;code&gt;$scope&lt;/code&gt; anytime the &lt;code&gt;$store&lt;/code&gt; changes, presumably preventing us from having to do a massive degree of dirty checking anytime we change something on the &lt;code&gt;$scope&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The second block ties a local &lt;code&gt;$scope.addTodo&lt;/code&gt; function to the &lt;code&gt;$store&lt;/code&gt;-modifying &lt;code&gt;addTodo&lt;/code&gt; function so that our data only has to update in one location from which all other &lt;code&gt;$scope&lt;/code&gt;s will derive that data.&lt;/p&gt;

&lt;p&gt;I hope this has given you an insight into how the seemingly disparate technologies can be used synergistically. Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title>Introduction to Auth0</title><description>&lt;p&gt;One major component of our thesis project is the ability to authenticate users from their Facebook accounts and vendors from their email address/password combinations. To do this, we could either 1) roll our own authentication scheme where our server issues &lt;a href="http://jwt.io/"&gt;JWTs&lt;/a&gt; to our clients or 2) use a service&lt;/p&gt;</description><link>http://localhost:2368/2014/12/18/introduction-to-auth0/</link><guid isPermaLink="false">89c72360-d73d-473a-846c-31c36e048959</guid><category>auth0</category><category>authentication</category><category>AaaS</category><category>authentication as a service</category><dc:creator>Sunny G</dc:creator><pubDate>Thu, 18 Dec 2014 19:17:33 GMT</pubDate><content:encoded>&lt;p&gt;One major component of our thesis project is the ability to authenticate users from their Facebook accounts and vendors from their email address/password combinations. To do this, we could either 1) roll our own authentication scheme where our server issues &lt;a href="http://jwt.io/"&gt;JWTs&lt;/a&gt; to our clients or 2) use a service that issues and manages the JWTs for us. To preserve our sanity, we chose the latter, specifically, the identity and authentication service &lt;a href="https://auth0.com"&gt;Auth0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Auth0 provides users a way to login via custom, open-source web forms called widgets that can be filled out with username/password combos or through social integration buttons that allow for third-party authentication by Facebook, Google, Twitter and others. &lt;/p&gt;

&lt;p&gt;Auth0 also gives you the option of customizing your login/signup pipeline by implementing your own rules in a sandboxed vanilla JavaScript environment with a few optional npm modules such as &lt;code&gt;pubnub&lt;/code&gt;, &lt;code&gt;azurestorage&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt;, or &lt;code&gt;mongo&lt;/code&gt;. You can, for example, have a rule setup to automatically notify your server via a PubNub channel every time a user signs up for your service.&lt;/p&gt;

&lt;p&gt;By default, Auth0 will store your user's credentials securely on their server, but you can also opt to have the same credentials stored on your own database by using the &lt;code&gt;mongo&lt;/code&gt; or &lt;code&gt;mysql&lt;/code&gt; npm modules within a rule that runs like a hook on certain types of authentications.&lt;/p&gt;

&lt;p&gt;In addition, Auth0 provides many other enterprise services, such as analytics and a web management dashboard. I think we made the right choice in opting-out of rolling our own authentication and I hope this post will help you make the same decision. Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title>Quantum Computer-Proof Digital Signatures, Part 2</title><description>&lt;p&gt;In my previous &lt;a href="http://blog.sunnyg.io/2014/12/07/lamport-key-pairs-and-signature-scheme/"&gt;post&lt;/a&gt;, I went over my &lt;a href="https://github.com/sunny-g/lamport-merkle.js"&gt;implementation&lt;/a&gt; of a quantum-computer-proof digital signature algorithm known as the &lt;a href="https://en.wikipedia.org/wiki/Lamport_signature"&gt;Lamport signature scheme&lt;/a&gt;. We also learned of its greatest weakness: the keypairs can only be used once. While we can't change this property of the algorithm, we can mitigate the weakness by&lt;/p&gt;</description><link>http://localhost:2368/2014/12/12/merkle-key-trees-and-signature-scheme/</link><guid isPermaLink="false">a523b41c-83b2-4ff9-b1b4-1cbf49139a6a</guid><category>lamport</category><category>encryption</category><category>signature</category><category>digital signature</category><category>merkle</category><category>quantum computer</category><dc:creator>Sunny G</dc:creator><pubDate>Sat, 13 Dec 2014 03:59:45 GMT</pubDate><content:encoded>&lt;p&gt;In my previous &lt;a href="http://blog.sunnyg.io/2014/12/07/lamport-key-pairs-and-signature-scheme/"&gt;post&lt;/a&gt;, I went over my &lt;a href="https://github.com/sunny-g/lamport-merkle.js"&gt;implementation&lt;/a&gt; of a quantum-computer-proof digital signature algorithm known as the &lt;a href="https://en.wikipedia.org/wiki/Lamport_signature"&gt;Lamport signature scheme&lt;/a&gt;. We also learned of its greatest weakness: the keypairs can only be used once. While we can't change this property of the algorithm, we can mitigate the weakness by chaining multiple Lamport keys together into a &lt;a href="https://en.wikipedia.org/wiki/Merkle_tree"&gt;Merkle tree&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="keypairstructure"&gt;Keypair Structure&lt;/h3&gt;

&lt;p&gt;A Merkle tree is just a &lt;a href="https://en.wikipedia.org/wiki/Tree_%28data_structure%29"&gt;tree&lt;/a&gt; where each node's value is the hash of its children's values. The top (or root) node has the interesting property of implicitly containing the information of the entire tree since every node's value implicitly contains the values of if it's children.&lt;/p&gt;

&lt;p&gt;So with this in mind, we will start by generating a Lamport keypair for every message we may want to sign with this key tree (the variable &lt;code&gt;keyNum&lt;/code&gt;). We then generate the hash of each keypair's public key and store these hashes in our tree (along with the keypairs and other useful information like the &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;numOfLevels&lt;/code&gt; in the tree, and the &lt;code&gt;topHash&lt;/code&gt;, which is effectively our key tree's public key). &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var MerkleKeyTree = function(keyNum) {
  this.size = keyNum || KEYNUM;
  this._leaves = [];
  this.usedKeyCount = 0;
  var firstRow = [];
  for (var leafNum = 0; leafNum &amp;lt; this.size; leafNum++) {
    var keypair = new LamportKeypair();
    this._leaves.push(keypair);
    firstRow.push( hash(keypair.pubKey) );
  }
  this.levels = [firstRow];

  var levels = Math.ceil(Math.log2(this.size));
  for (var i = 1; i &amp;lt;= levels; i++) {
    // for each level in the tree starting w/ 1 above the bottom
    var curRow = [];
    var prevRow = this.levels[i-1];
    for (var k = 0; k &amp;lt; prevRow.length; k += 2) {
      // for each hash in the previous row
      // hash it and the next hash's values
      var h = hash(prevRow[k] + prevRow[k+1]);
      curRow.push(h);
    }
    this.levels[i] = curRow;
  }

  this.numOfLevels = this.levels.length;
  this.numOfKeys = this._leaves.length;
  this.topHash = this.levels[this.levels.length - 1][0];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So here's what the Merkle tree in our key tree looks like, with each array containing the hashes of its two child hashes:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2014/12/Screen-Shot-2014-12-12-at-7-36-15-PM-1.png" alt="A sample Merkle key tree"&gt;&lt;/p&gt;

&lt;h3 id="messagesigning"&gt;Message Signing&lt;/h3&gt;

&lt;p&gt;To use this tree to sign a message, we have to: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select a keypair (&lt;code&gt;leaf&lt;/code&gt;) and use it to generate a signature.  &lt;/li&gt;
&lt;li&gt;Publish the signature, along with the path of hashes at each level necessary to recreate the &lt;code&gt;topHash&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We &lt;em&gt;must&lt;/em&gt; publish the path so that once the user verifies that the Lamport keypair we used was legitimate, they can hash the public key + sibling public key, and continue hashing these hashes + their siblings until they reach the &lt;code&gt;topHash&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    MerkleKeyTree.prototype.sign = function(msg) {
      var finalSig = {};
      if (this.usedKeyCount === this.size - 1) {
        throw new Error('This is your last keypair on this tree);
      }
      // select the first unused keypair
      for (var i = 0; i &amp;lt; this.numOfKeys; i++) {
        if (!this._leaves[i].used) {
          var randomKeypair = this._leaves[i];
          var randomKeypairIndex = i;
          break;
        }
      }
      finalSig.keyPairId = randomKeypairIndex;
      finalSig.pubKey = randomKeypair.pubKey;
      finalSig.message = msg;
      finalSig.signature = randomKeypair.sign(msg);
      // create the path of the hashes needed to get from the
        // published keypair to the topHash
      finalSig.path = [];
      var curLevel = 0;
      var idx = randomKeypairIndex;
      while (curLevel &amp;lt; this.numOfLevels) {
        if (idx % 2) {
          finalSig.path.push(this.levels[curLevel][idx - 1])
        } else {
          finalSig.path.push(this.levels[curLevel][idx + 1])
        }
        curLevel++;
        idx = parentIdx(idx);
      }
      // publish the signature, set key properties
      finalSig.path[finalSig.path.length - 1] = this.topHash;
      randomKeypair.used = true;
      this.usedKeyCount++;
      return finalSig;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here's an example signature of a message signed by the key tree above: &lt;br&gt;
&lt;img src="http://localhost:2368/content/images/2014/12/Screen-Shot-2014-12-12-at-7-39-34-PM-1.png" alt="A sample signature"&gt;&lt;/p&gt;

&lt;h3 id="messageverification"&gt;Message Verification&lt;/h3&gt;

&lt;p&gt;To verify a signature, we must first verify &lt;code&gt;signature&lt;/code&gt; against &lt;code&gt;pubKey&lt;/code&gt;, just as we would with a traditional Lamport key. Then, we'll have to hash the &lt;code&gt;pubKey&lt;/code&gt; and hash the result (in the right order) with its sibling key's hash, and keep taking the output and hashing it with its sibling in the next level of the key tree until we end up with one, lone hash. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MerkleKeyTree.prototype.verify = function(sigObj) {
  var idx = sigObj.keyPairId;
  var lamport = this._leaves[idx];
  // if this is a valid Lamport signature...
  if (lamport.verify(sigObj.message, sigObj.signature)) {

    // ... calculate the sibling hashes until you reach the topHash  
    var h = hash(sigObj.pubKey);
    for (var i = 0; i &amp;lt; sigObj.path.length - 1; i++) {
      var auth = sigObj.path[i];
      if (idx % 2) {
        h = hash(auth + h);
      } else {
        h = hash(h + auth);
      }
      idx = parentIdx(idx); // gets the parent level hash index
    }
    if (h === sigObj.path[sigObj.path.length - 1]) { return true; }
  }
  return false;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If at the end of this process we end up with the string at the end of our &lt;code&gt;path&lt;/code&gt; array (which is also our &lt;code&gt;topHash&lt;/code&gt;), we'll know that the key used to sign the message belongs to this key tree and this &lt;code&gt;topHash&lt;/code&gt; (which should match up with the &lt;code&gt;topHash&lt;/code&gt; of the expected owner and message signer). &lt;/p&gt;

&lt;p&gt;In conclusion, with this signature scheme, we've allowed a user to generate one large key tree that can be used to sign arbitrarily many messages (including newer keytrees) while only marginally increasing the signature size. While this can't be used for secretly encrypting messages, in many applications (e.g. authenticating cryptocurrency transactions), a signature scheme is just enough. &lt;/p&gt;

&lt;p&gt;I hope both of these posts have shed some light on how wild yet understandable some cryptographic concepts can be. You can always check out my repo &lt;a href="https://github.com/sunny-g/lamport-merkle.js"&gt;here&lt;/a&gt; and as always, thanks for reading!&lt;/p&gt;</content:encoded></item><item><title>Quantum Computer-Proof Digital Signatures, Part 1</title><description>&lt;p&gt;For my MVP (minimal viable product) project at &lt;a href="http://hackreactor.com"&gt;Hack Reactor&lt;/a&gt;, I developed a browser &lt;a href="https://github.com/sunny-g/lamport-merkle.js"&gt;library&lt;/a&gt; that implements two quantum-computer-proof digital signature algorithms known as the &lt;a href="https://en.wikipedia.org/wiki/Lamport_signature"&gt;Lamport&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Merkle_signature_scheme"&gt;Merkle signature schemes&lt;/a&gt;. In this post, I'll be going over the Lamport scheme and how it works. &lt;/p&gt;

&lt;h3 id="keypairstructure"&gt;Keypair Structure&lt;/h3&gt;

&lt;p&gt;Unlike keypairs of traditional&lt;/p&gt;</description><link>http://localhost:2368/2014/12/07/lamport-key-pairs-and-signature-scheme/</link><guid isPermaLink="false">02ac08f0-492a-4248-b2e3-be1c462a4b16</guid><category>lamport</category><category>encryption</category><category>signature</category><category>digital signature</category><category>merkle</category><category>quantum computer</category><dc:creator>Sunny G</dc:creator><pubDate>Sun, 07 Dec 2014 21:08:05 GMT</pubDate><content:encoded>&lt;p&gt;For my MVP (minimal viable product) project at &lt;a href="http://hackreactor.com"&gt;Hack Reactor&lt;/a&gt;, I developed a browser &lt;a href="https://github.com/sunny-g/lamport-merkle.js"&gt;library&lt;/a&gt; that implements two quantum-computer-proof digital signature algorithms known as the &lt;a href="https://en.wikipedia.org/wiki/Lamport_signature"&gt;Lamport&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Merkle_signature_scheme"&gt;Merkle signature schemes&lt;/a&gt;. In this post, I'll be going over the Lamport scheme and how it works. &lt;/p&gt;

&lt;h3 id="keypairstructure"&gt;Keypair Structure&lt;/h3&gt;

&lt;p&gt;Unlike keypairs of traditional encryption algorithms, Lamport keys are not mathematically tied to one another nor are they derived from hard-to-solve problems like prime factorization (this is in fact the reason this algorithm is quantum computer-proof: so long as our secure hashing function can't have solving its inverse optimized by quantum computing, we should be safe). Our private key then is simply composed of 256 pairs of 32 byte numbers while the public key is made up of the hashes of each number:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var LamportKeypair = function() {
  this._privKey = [];
  this.pubKey = [];
  this.used = false;

  for (var i = 0; i &amp;lt; 256; i++) {
    var num1 = random32ByteString();
    var num2 = random32ByteString();
    var hash1 = hash(num1);
    var hash2 = hash(num2);

    this._privKey.push([num1, num2]);
    this.pubKey.push([hash1, hash2]);
  }
}; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="messagesigning"&gt;Message Signing&lt;/h3&gt;

&lt;p&gt;To sign a message with this key, we only have to do two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Generate a 32 byte (256 bit) hash of the message.  &lt;/li&gt;
&lt;li&gt;For each bit in the message, publish either the 1st or 2nd random number of that bit's corresponding pair of numbers within our private key.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These steps end up looking like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LamportKeypair.prototype.sign = function(msg) {
  var msgHash = hash(msg);
  var signature = [];

  var that = this;
  // this iterates over every bit in a hash string 
  // callback takes the bit and its index in the string
  eachBit(msgHash, function(bit, bitIdx) {
    signature.push( that._privKey[bitIdx][bit] );
  });
  return signature;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But wait, if we publish the numbers in our private key, doesn't that defeat the purpose of making it private? &lt;/p&gt;

&lt;p&gt;Well yes, and this highlights the usability weakness of this signature scheme: we can only use each keypair once. The workaround for this is to incorporate multiple keys into a Merkle tree, but that's a topic for a later &lt;a href="http://blog.sunnyg.io/2014/12/13/merkle-key-trees-and-signature-scheme/"&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="messageverification"&gt;Message Verification&lt;/h3&gt;

&lt;p&gt;To verify the message, all we need to do now is check to see that every number in our signature hashes to one of the values in its corresponding pair in our public key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LamportKeypair.prototype.verify = function(msg, signature) {
  var msgHash = hash(msg);
  var authentic = true;

  var that = this;
  eachBit(msgHash, function(bit, bitIdx) {
    if (hash(signature[bitIdx]) !== that.pubKey[bitIdx][bit]) {
      authentic = false;
    }
  });
  return authentic;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;hr&gt;

&lt;h3 id="whythisworks"&gt;Why This Works&lt;/h3&gt;

&lt;p&gt;To be a valid digital signature algorithm, we have to satisfy one main condition (and maybe a few others that I'm forgetting): &lt;em&gt;the public key cannot leak any information about the private key&lt;/em&gt;. Since our public key only contains the hashes of these random numbers (and since hash functions can't be run in reverse, that is, from a hash tell us the input), we satisfy that condition and can now know with certainty one thing: &lt;strong&gt;the only person who could have published the numbers in the signature and the hashes in the public key is the same person who possessed all of the random numbers of the private key in the first place.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I hope this post has piqued your interest in non-traditional encryption schemes; I have a &lt;a href="http://blog.sunnyg.io/2014/12/13/merkle-key-trees-and-signature-scheme/"&gt;companion post&lt;/a&gt; about how Merkle trees can mitigate the one-time-expiry property of Lamport signatures. If you want to check out my repo, you can find it (and star it hopefully?) &lt;a href="https://github.com/sunny-g/lamport-merkle.js"&gt;here&lt;/a&gt;. Thanks for reading!&lt;/p&gt;</content:encoded></item><item><title>JavaScript's Bind Function</title><description>&lt;p&gt;Today I'll be walking through my simple, less robust reimplentation of &lt;code&gt;Function.prototype.bind()&lt;/code&gt; which, along with &lt;code&gt;apply()&lt;/code&gt; and &lt;code&gt;call()&lt;/code&gt;, allows us JavaScript developers use functions outside of their defined execution context. However, unlike &lt;code&gt;apply()&lt;/code&gt; and &lt;code&gt;call()&lt;/code&gt;, bind returns a function bound to the specified context (instead of immediately invoking&lt;/p&gt;</description><link>http://localhost:2368/2014/11/19/the-bind-function/</link><guid isPermaLink="false">907fb5e1-8aea-436f-a56c-35619a32e9f4</guid><category>javascript</category><category>bind</category><category>apply</category><category>call</category><dc:creator>Sunny G</dc:creator><pubDate>Wed, 19 Nov 2014 16:56:55 GMT</pubDate><content:encoded>&lt;p&gt;Today I'll be walking through my simple, less robust reimplentation of &lt;code&gt;Function.prototype.bind()&lt;/code&gt; which, along with &lt;code&gt;apply()&lt;/code&gt; and &lt;code&gt;call()&lt;/code&gt;, allows us JavaScript developers use functions outside of their defined execution context. However, unlike &lt;code&gt;apply()&lt;/code&gt; and &lt;code&gt;call()&lt;/code&gt;, bind returns a function bound to the specified context (instead of immediately invoking the function in the new context). The information in this paragraph alone is enough to start implementing &lt;code&gt;bind&lt;/code&gt;, but in case it's not obvious, let's continue. &lt;/p&gt;

&lt;p&gt;So, what do we mean when we say we're "binding" a function to an "execution context?" In short, "setting a function's execution context" sets its value of &lt;code&gt;this&lt;/code&gt; to the specified context. Say we had an object called &lt;code&gt;alice&lt;/code&gt;: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var alice = {
    name: 'alice',
    shout: function() {
        console.log('Hey' + this.name + '!');
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Calling &lt;code&gt;alice.shout()&lt;/code&gt; will log &lt;code&gt;'Hey alice!'&lt;/code&gt;. Simple. But what if we wanted to have an object &lt;code&gt;bob&lt;/code&gt; with a &lt;code&gt;'name'&lt;/code&gt; property of &lt;code&gt;'bob'&lt;/code&gt; to shout as well, without repeating ourselves by rewriting the function? Well then we'd need to apply the function to our object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alice.shout.apply(bob); //      logs 'Hey bob!'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main (and maybe only) difference between &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; is the function signature; &lt;code&gt;call&lt;/code&gt; takes in a context and the arguments as individual parameters, whereas &lt;code&gt;apply&lt;/code&gt; takes in the context and an array of arguments. With this understanding of &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;, we now have enough information to implement &lt;code&gt;bind&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id="thesolution"&gt;The Solution&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;Function.prototype.bind = function(context) {
    var args = Array.prototype.slice.call(arguments, 1);
    var funcToBind = this;
    return function() {
        var boundFuncArgs = Array.prototype.slice.call(arguments);
        return funcToBind.apply(context, args.concat(boundFuncArgs));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The bind function takes in one specified argument (the desired context) and (as well as optional arguments that may be closure-scoped to the bound function). The second line stores these arguments in an array called &lt;code&gt;args&lt;/code&gt;. We'll also create a temporary variable &lt;code&gt;funcToBind&lt;/code&gt; to hold a reference to our function since the keyword &lt;code&gt;this&lt;/code&gt; will take on new meaning within the function we return.&lt;/p&gt;

&lt;p&gt;This returned function will also have its own variables stored in an array called &lt;code&gt;boundFuncArgs&lt;/code&gt;. Then we return the value of calling &lt;code&gt;funcToBind&lt;/code&gt; in the specified context with the arguments being the closure-scoped &lt;code&gt;args&lt;/code&gt; concatenated with the &lt;code&gt;boundFuncArgs&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;So using &lt;code&gt;bind&lt;/code&gt;, we can now return a function specific to logging &lt;code&gt;bob.name&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var bobShout = alice.shout.bind(bob)
bobShout()    // logs 'Hey bob!'
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="oneusecase"&gt;One Use Case&lt;/h4&gt;

&lt;p&gt;One common use of &lt;code&gt;bind&lt;/code&gt; is within a &lt;code&gt;setTimeout&lt;/code&gt; call. Say we wanted to call &lt;code&gt;alice.shout()&lt;/code&gt; 2 seconds from now. We could write the function like this, but it would fail:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setTimeout(alice.shout, 2000);    // logs undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This fails because &lt;code&gt;setTimeout&lt;/code&gt; only immediately stores a reference to the function; when this function is executed 2 seconds from now, its execution context (and thus, the keyword &lt;code&gt;this&lt;/code&gt;) will be set to the &lt;code&gt;global&lt;/code&gt; (or in the browser, &lt;code&gt;window&lt;/code&gt;) object, which doesn't have a property &lt;code&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If, however, we were to &lt;code&gt;bind&lt;/code&gt; the function to &lt;code&gt;alice&lt;/code&gt;, we could execute this code flawlessly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setTimeout(alice.shout.bind(alice), 2000);     // logs 'Hey alice!'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To reiterate, this works because at the time &lt;code&gt;bind&lt;/code&gt; is being called (the same time &lt;code&gt;setTimeout&lt;/code&gt; is storing the function reference), &lt;code&gt;bind&lt;/code&gt; is returning us the same function with the keyword &lt;code&gt;this&lt;/code&gt; permanently bound to the specified context, which in this case is the object &lt;code&gt;alice&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;I hope this clarifies some of the confusion about &lt;code&gt;bind&lt;/code&gt;, though it seems to me that we may have passed that confusion on to how the &lt;code&gt;this&lt;/code&gt; keyword works, which I'll tackle in a later post.&lt;/p&gt;</content:encoded></item><item><title>IP Addressing (and a segue into CJDNS)</title><description>&lt;p&gt;In this post, I'll be lightly elaborating on a 5-minute talk I've yet to give to my classmates at &lt;a href="http://www.hackreactor.com/"&gt;Hack Reactor&lt;/a&gt;. We'll start with IPv4 addresses, their format and what's known as &lt;a href="http://en.wikipedia.org/wiki/IP_address#IPv4_address_exhaustion"&gt;address exhaustion&lt;/a&gt; before going over the advantages to the new IPv6 address format and finishing with an overview&lt;/p&gt;</description><link>http://localhost:2368/2014/11/17/ip-addressing-and-a-segue-into-cjdns/</link><guid isPermaLink="false">1f35c40e-6f7f-47c8-b9df-dfb6bd253a10</guid><category>cjdns</category><category>p2p</category><category>ipv6</category><category>meshnet</category><category>ipv4</category><dc:creator>Sunny G</dc:creator><pubDate>Tue, 18 Nov 2014 06:58:12 GMT</pubDate><content:encoded>&lt;p&gt;In this post, I'll be lightly elaborating on a 5-minute talk I've yet to give to my classmates at &lt;a href="http://www.hackreactor.com/"&gt;Hack Reactor&lt;/a&gt;. We'll start with IPv4 addresses, their format and what's known as &lt;a href="http://en.wikipedia.org/wiki/IP_address#IPv4_address_exhaustion"&gt;address exhaustion&lt;/a&gt; before going over the advantages to the new IPv6 address format and finishing with an overview into &lt;a href="https://github.com/cjdelisle/cjdns"&gt;CJDNS&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="ipv4"&gt;IPv4&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Ipv4_address.svg/500px-Ipv4_address.svg.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;IPv4 addresses are composed of 4 sections of 8-bit numbers, giving us an address space of (2^8)^4 addresses, or for those who don't speak in exponentials, a maximum of 4,294,967,296 unique addresses. However, the amount actually addressable to individual devices is far less since many of these are (by convention) inaccessible or reserved for other uses.&lt;/p&gt;

&lt;p&gt;For example, some addresses were allocated to some big companies of the 90's, such as Xerox, Apple and Halliburton. Other addresses and address spaces, were allocated for future private use. Two such addresses are &lt;a href="http://127.0.0.0"&gt;http://127.0.0.0&lt;/a&gt; and &lt;a href="http://127.0.0.1"&gt;http://127.0.0.1&lt;/a&gt; and are known as the loopback addresses, only accessible locally on your computer or server (hence the more common URL, &lt;a href="http://localhost"&gt;http://localhost&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;There are some ranges reserved for "private networks," some of which you might recognize as your router's IP address (192.168.0.1, 10.0.0.1 or 172.16.0.0). By giving routers a unique global address (and giving their connected devices a derivative address from one of the three private network address spaces listed above), we've been able to mitigate this &lt;a href="http://en.wikipedia.org/wiki/IP_address#IPv4_address_exhaustion"&gt;address space exhaustion&lt;/a&gt; issue and avoid its implications. But considering there may be as many 16 billion internet-connected devices by the end of 2014, even this scheme will have to come to an end.&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="ipv6"&gt;IPv6&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/15/Ipv6_address.svg/500px-Ipv6_address.svg.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;The next iteration of IP addressing is known as IPv6 and makes quite a large change to their format. They are composed of 8 groups of 4 hexadecimal characters, giving us an address space of (16^4)^8 == 2^128, or 3.402 e38 addresses. Interestingly enough, this scheme was named in 1995, meaning that this problem was not only forseen almost 20 years ago, but  &lt;strong&gt;it has also been acted on by no one for almost 20 years.&lt;/strong&gt; But this brings me to my next point and what I really want to talk about...&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id="cjdns"&gt;CJDNS&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/cjdelisle/cjdns"&gt;CJDNS&lt;/a&gt; is an open-source, p2p encrypted meshnetting software and protocol whose developers aim make it the backbone of a new, NSA-proof internet (a goal that, while very, very lofty, might actually be accomplished at some point in the future). &lt;/p&gt;

&lt;p&gt;Although it's use constitutes a separate, otherwise inaccessible-to-the-rest-of-the-world internet, I included it here in this post because it does something very interesting: it assigns unique IPv6 addresses to all of it's nodes from the get-go. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://essayweb.net/miscellany/images/OSI_model.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;On what we know as the World Wide Web, traffic can be encrypted between a browser and server on the presentation layer of the OSI Model using the SSL protocol, which is now used almost everywhere. However, there are some weaknesses with SSL (excluding &lt;a href="http://heartbleed.com/"&gt;bugs&lt;/a&gt; in some of its various implementations), namely the required existence of trusted third-parties. &lt;/p&gt;

&lt;p&gt;Rather than resort to this layer for encrypting traffic, CJDNS operates and encrypts on the IP layer, just above the two layers responsible for actually carrying and delivering internet traffic. In effect, CJDNS completely hijacks and rewrites the book on how IP-layer traffic and routing work and the responsibilities they should inherit.&lt;/p&gt;

&lt;p&gt;What's even more interesting is the fact that the addresses themselves are the hash of the public keys used to encrypt the packets sent between any two nodes. This means that you can always be certain that the address you are communicating with is responsible for the encryption of the traffic you receive from them and that the traffic has not been man-in-the-middled; who that user is and whether or not you can trust them is unfortunately a completely different question.&lt;/p&gt;

&lt;p&gt;I'm going to end this post here, but will continue this line of thought in another post in the near future, and will hopefully be connected to its most popular intranet known as &lt;a href="https://wiki.projectmeshnet.org/Known_Hyperboria_sites"&gt;Hyperboria&lt;/a&gt;; if so, I'll be sure to leave a tutorial for getting started with this super-cool software.&lt;/p&gt;</content:encoded></item><item><title>This and That, On Inheritance</title><description>&lt;p&gt;This place rocks. While I can't claim to be an expert on the keyword 'this' or every difference and nuance between the four instantiation styles (functional, functional-shared, prototypal, and pseudoclassical), I definitely have a best grasp I've ever had on the topics. Perhaps in another post I'll lay out what&lt;/p&gt;</description><link>http://localhost:2368/2014/11/02/this-and-that-on-inheritance/</link><guid isPermaLink="false">63c36662-aa07-4e09-9110-649ac28ef215</guid><category>pseudoclassical</category><category>hack reactor</category><category>instantiation</category><category>javascript</category><category>prototypal</category><dc:creator>Sunny G</dc:creator><pubDate>Sun, 02 Nov 2014 22:42:02 GMT</pubDate><content:encoded>&lt;p&gt;This place rocks. While I can't claim to be an expert on the keyword 'this' or every difference and nuance between the four instantiation styles (functional, functional-shared, prototypal, and pseudoclassical), I definitely have a best grasp I've ever had on the topics. Perhaps in another post I'll lay out what I understand about them.&lt;/p&gt;

&lt;p&gt;My partner and I have been sailing through the data structures sprint, which has us implementing (w/o using arrays) simple stacks, queues, linked lists, sets, hash tables, trees, binary search trees and graphs and some simple associated methods. I can't speak highly enough of how cool it's been to finally grok what these structures are, what they are good for, and (especially for achieving mastery), what they're bad at.&lt;/p&gt;</content:encoded></item><item><title>First Day Down</title><description>&lt;p&gt;Hack Reactor is exactly as intense as you think it would be, if not in terms of content (since we're primarily reviewing some of the later precourse work), then in terms of sheer endurance required. 11 hours a day, 6 days a week is no joke, and if you're not&lt;/p&gt;</description><link>http://localhost:2368/2014/11/02/first-day-down/</link><guid isPermaLink="false">b2dc39ab-9584-474a-acd1-c579002f35fd</guid><category>hack reactor</category><category>javascript</category><category>recursion</category><dc:creator>Sunny G</dc:creator><pubDate>Sun, 02 Nov 2014 22:41:09 GMT</pubDate><content:encoded>&lt;p&gt;Hack Reactor is exactly as intense as you think it would be, if not in terms of content (since we're primarily reviewing some of the later precourse work), then in terms of sheer endurance required. 11 hours a day, 6 days a week is no joke, and if you're not in tune with your own needs, you definitely run the risk of burning out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Pgd2w0SQEYI"&gt;Having said that&lt;/a&gt;, I cannot wait for tomorrow. Marcus spent a good time today differentiating between the different strategies we could employ to rewrite a basic version of a very popular browser-based recursive function, using the analogy of telling classmates to write down the names of those around them wearing red shirts on a notepad:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Marcus telling each classmate to write the names on a public notepad is akin to storing your recursion results in a global var, which means that you can only call the function once before having to instantiate a new var or clean out the old one.  &lt;/li&gt;
&lt;li&gt;Marcus creating a notepad and passing it to the first classmates (to be passed along afterwards) would be like creating a top level var within your function and calling a subroutine to do all of the recursion (my previous preference and go-to strategy).  &lt;/li&gt;
&lt;li&gt;The third has each classmate write their own notepad of names and pass the notepad up to the classmate who passed the instructions, concatenating them with the caller's notepads every step of the way until you get to Marcus, who just returns the notepad. It took me a while to finally wrap my head around it (which is not to say that if you asked me to write this tomorrow, I would do it successfully), but I think I have a much more solid grasp on recursion than at any point in the last year, so there's that. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hopefully that made sense but if it doesn't, well whatever, its 11:13PM after my first day and I'm tired as hell. &lt;/p&gt;</content:encoded></item><item><title>'Twas The Night Before Hack Reactor</title><description>&lt;p&gt;So tomorrow begins the rest of my life. To satisfy a necessary requirement of the program, I set up this blog. Hopefully though, that won't be the only reason why I maintain it. As I get more comfortable with what I learn and teach myself, I will [ideally] develop a&lt;/p&gt;</description><link>http://localhost:2368/2014/11/02/twas-the-night-before-hack-reactor/</link><guid isPermaLink="false">0948a5ac-b26c-4206-8ddd-f4e4bc7e1917</guid><category>hack reactor</category><category>javascript</category><dc:creator>Sunny G</dc:creator><pubDate>Sun, 02 Nov 2014 22:21:22 GMT</pubDate><content:encoded>&lt;p&gt;So tomorrow begins the rest of my life. To satisfy a necessary requirement of the program, I set up this blog. Hopefully though, that won't be the only reason why I maintain it. As I get more comfortable with what I learn and teach myself, I will [ideally] develop a voice and a purpose for contributing here, and will hopefully be able to distill and share more useful, more relevant and easier-to-comprehend-and-digest ideas and information.&lt;/p&gt;

&lt;p&gt;But don't hold your breath, this could take a while.&lt;/p&gt;</content:encoded></item></channel></rss>